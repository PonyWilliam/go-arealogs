// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/arealogs/arealogs.proto

package go_micro_service_arealogs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AreaLogs service

func NewAreaLogsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AreaLogs service

type AreaLogsService interface {
	AddLog(ctx context.Context, in *ALog, opts ...client.CallOption) (*Status, error)
	FindAll(ctx context.Context, in *Null, opts ...client.CallOption) (*Logs, error)
	FindByID(ctx context.Context, in *Id, opts ...client.CallOption) (*Log, error)
	FindByAID(ctx context.Context, in *Area, opts ...client.CallOption) (*Logs, error)
	FindByWID(ctx context.Context, in *Worker, opts ...client.CallOption) (*Logs, error)
}

type areaLogsService struct {
	c    client.Client
	name string
}

func NewAreaLogsService(name string, c client.Client) AreaLogsService {
	return &areaLogsService{
		c:    c,
		name: name,
	}
}

func (c *areaLogsService) AddLog(ctx context.Context, in *ALog, opts ...client.CallOption) (*Status, error) {
	req := c.c.NewRequest(c.name, "AreaLogs.AddLog", in)
	out := new(Status)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaLogsService) FindAll(ctx context.Context, in *Null, opts ...client.CallOption) (*Logs, error) {
	req := c.c.NewRequest(c.name, "AreaLogs.FindAll", in)
	out := new(Logs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaLogsService) FindByID(ctx context.Context, in *Id, opts ...client.CallOption) (*Log, error) {
	req := c.c.NewRequest(c.name, "AreaLogs.FindByID", in)
	out := new(Log)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaLogsService) FindByAID(ctx context.Context, in *Area, opts ...client.CallOption) (*Logs, error) {
	req := c.c.NewRequest(c.name, "AreaLogs.FindByAID", in)
	out := new(Logs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaLogsService) FindByWID(ctx context.Context, in *Worker, opts ...client.CallOption) (*Logs, error) {
	req := c.c.NewRequest(c.name, "AreaLogs.FindByWID", in)
	out := new(Logs)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AreaLogs service

type AreaLogsHandler interface {
	AddLog(context.Context, *ALog, *Status) error
	FindAll(context.Context, *Null, *Logs) error
	FindByID(context.Context, *Id, *Log) error
	FindByAID(context.Context, *Area, *Logs) error
	FindByWID(context.Context, *Worker, *Logs) error
}

func RegisterAreaLogsHandler(s server.Server, hdlr AreaLogsHandler, opts ...server.HandlerOption) error {
	type areaLogs interface {
		AddLog(ctx context.Context, in *ALog, out *Status) error
		FindAll(ctx context.Context, in *Null, out *Logs) error
		FindByID(ctx context.Context, in *Id, out *Log) error
		FindByAID(ctx context.Context, in *Area, out *Logs) error
		FindByWID(ctx context.Context, in *Worker, out *Logs) error
	}
	type AreaLogs struct {
		areaLogs
	}
	h := &areaLogsHandler{hdlr}
	return s.Handle(s.NewHandler(&AreaLogs{h}, opts...))
}

type areaLogsHandler struct {
	AreaLogsHandler
}

func (h *areaLogsHandler) AddLog(ctx context.Context, in *ALog, out *Status) error {
	return h.AreaLogsHandler.AddLog(ctx, in, out)
}

func (h *areaLogsHandler) FindAll(ctx context.Context, in *Null, out *Logs) error {
	return h.AreaLogsHandler.FindAll(ctx, in, out)
}

func (h *areaLogsHandler) FindByID(ctx context.Context, in *Id, out *Log) error {
	return h.AreaLogsHandler.FindByID(ctx, in, out)
}

func (h *areaLogsHandler) FindByAID(ctx context.Context, in *Area, out *Logs) error {
	return h.AreaLogsHandler.FindByAID(ctx, in, out)
}

func (h *areaLogsHandler) FindByWID(ctx context.Context, in *Worker, out *Logs) error {
	return h.AreaLogsHandler.FindByWID(ctx, in, out)
}
